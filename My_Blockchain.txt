#Creating Block
 #Blocks: A block is an individual transaction or piece of data that is being stored within the blockchain.

 # import datetime library
 from datetime import datetime
 # print current date and time
 print(datetime.now())

 class Block:
 # default constructor for block class
  def __init__(self, transactions, previous_hash, nonce = 0):
   self.transactions = transactions
   self.previous_hash = previous_hash  #Previous Hash: Each block has a reference to the block prior to its hash. This is what makes the blockchain unique because this link will be broken if a block is tampered with.
   self.nonce = nonce                  #Nonce: A number to be guessed by miners which when combined with the block produces an acceptable hash.
   self.timestamp = datetime.now()     #Timestamp: The time the block is created determines the location of it on the blockchain.

#Hashing and SHA-256  

 #Hashing: Generating a random string of characters from a given input.

 # import sha256
 from hashlib import sha256
 # text to hash
 text = 'I am excited to learn about blockchain!'
 hash_result = sha256(text.encode())
 # print result
 print(hash_result.hexdigest())  #.Hexdigest() Print a hash object
 
#Generating Block Hashes

 from datetime import datetime
 from hashlib import sha256

 class Block:
  def __init__(self, transactions, previous_hash, nonce = 0):
    self.timestamp = datetime.now()
    self.transactions = transactions
    self.previous_hash = previous_hash
    self.nonce = nonce
    self.hash = self.generate_hash()
    
  def print_block(self):
    # prints block contents
    print("timestamp:", self.timestamp)
    print("transactions:", self.transactions)
    print("current hash:", self.generate_hash())
    
  def generate_hash(self):
    # hash the blocks contents
    block_contents = str(self.timestamp) + str(self.transactions) + str(self.previous_hash) + str(self.nonce)
    block_hash = sha256(block_contents.encode())
    return block_hash.hexdigest()

#Creating the Blockchain Class
 #Blockchain: A blockchain is an accurate and permanent record of transactions that have been verified and stored in a chronological sequence.

 #imports the Block class from block.py
 from block import Block

 #Chain: A list that that holds all the blocks inside the blockchain.
 class Blockchain:
    def __init__(self):
      self.chain = []
      self.all_transactions = []
      self.genesis_block()

    #Genesis Block: The genesis block is the first block on the blockchain and it is typically hard-coded into the blockchain structure, it does not have a link to a previous hash it's automatically generated when the blockchain is initialized.
    def genesis_block(self):
      transactions = []
      previous_hash = "0"
      self.chain.append(Block(transactions, previous_hash))

#Adding Blocks to the Blockchain

 #imports the Block class from block.py
 from block import Block

 class Blockchain:
  def __init__(self):
    self.chain = []
    self.all_transactions = []
    self.genesis_block()

  def genesis_block(self):
    transactions = {}
    genesis_block = Block(transactions, "0")
    self.chain.append(genesis_block)
    return self.chain

  # prints contents of blockchain
  def print_blocks(self):
    for i in range(len(self.chain)):
      current_block = self.chain[i]
      print("Block {} {}".format(i, current_block))
      current_block.print_contents()    
  
  # add block to blockchain 'chain'
  def add_block(self, transactions):
    previous_block_hash = self.chain[len(self.chain)-1].hash
    new_block = Block(transactions, previous_block_hash)
    self.chain.append(new_block)

#Checking for a Broken Chain

 #imports the Block class from block.py
 from block import Block

 class Blockchain:
   def __init__(self):
     self.chain = []
     self.all_transactions = []
     self.genesis_block()

   def genesis_block(self):
     transactions = {}
     genesis_block = Block(transactions, "0")
     self.chain.append(genesis_block)
     return self.chain

  # prints contents of blockchain
   def print_blocks(self):
     for i in range(len(self.chain)):
       current_block = self.chain[i]
       print("Block {} {}".format(i, current_block))
      current_block.print_contents()    
  
  # add block to blockchain 'chain'
   def add_block(self, transactions):
     previous_block_hash = self.chain[len(self.chain)-1].hash
     new_block = Block(transactions, previous_block_hash)
     self.chain.append(new_block)

   def validate_chain(self):
     for i in range(1, len(self.chain)):
       current = self.chain[i]
       previous = self.chain[i-1]
       if(current.hash != current.generate_hash()):
         print("The current hash of the block does not equal the generated hash of the block.")
         return False
       if(current.previous_hash != previous.generate_hash()):
         print("The previous block's hash does not equal the previous hash value stored in the current block.")
         return False
     return True

#Hacking the Chain

 from blockchain import Blockchain

 new_transactions = [{'amount': '30', 'sender':'André', 'receiver':'Pedro'},
               	{'amount': '55', 'sender':'Bernardo', 'receiver':'Vasco'}]


 my_blockchain = Blockchain()
 my_blockchain.add_block(new_transactions)
 my_blockchain.print_blocks()
 my_blockchain.chain[1].transactions = 'fake_transactions'
 my_blockchain.validate_chain()

#Nonce and Proof-of-Work
 #Proof-of-Work: A security feature in blockchain to prevent attackers from easily taking over the blockchain.
 #Longest Chain: The most trusted chain with the largest amount of computational work done in calculating the Proof-of-Work.
 
 new_transactions = [{'amount': '30', 'sender':'alice', 'receiver':'bob'},
               	    {'amount': '55', 'sender':'bob', 'receiver':'alice'}]

 # import sha256
 from hashlib import sha256
 # sets the amount of leading zeros that must be found in the hash produced by the nonce
 difficulty = 2
 nonce = 0

 # creating the proof 
 proof = sha256((str(nonce)+str(new_transactions)).encode()).hexdigest() #.hexdigest()properly store the hash value
 # printing proof
 print(proof)
  
 # finding a proof that has 2 leading zeros
 while (proof[:2] != '0' * difficulty):
   nonce += 1
   proof = sha256((str(nonce) + str(new_transactions)).encode()).hexdigest() #.hexdigest()properly store the hash value

 # printing final proof that was found
 final_proof = proof
 print(final_proof)

#Implementing Proof-of-Work

 #imports the Block class from block.py
 from block import Block

 class Blockchain:
   def __init__(self):
     self.chain = []
     self.all_transactions = []
     self.genesis_block()

   def genesis_block(self):
     transactions = {}
     genesis_block = Block(transactions, "0")
     self.chain.append(genesis_block)
    return self.chain

   # prints contents of blockchain
   def print_blocks(self):
     for i in range(len(self.chain)):
       current_block = self.chain[i]
       print("Block {} {}".format(i, current_block))
       current_block.print_contents()    
   
   # add block to blockchain 'chain'
   def add_block(self, transactions):
     previous_block_hash = self.chain[len(self.chain)-1].hash
     new_block = Block(transactions, previous_block_hash)
     self.chain.append(new_block)

   def validate_chain(self):
     for i in range(1, len(self.chain)):
       current = self.chain[i]
       previous = self.chain[i-1]
       if(current.hash != current.generate_hash()):
         print("The current hash of the block does not equal the generated hash of the block.")
         return False
       if(current.previous_hash != previous.generate_hash()):
         print("The previous block's hash does not equal the previous hash value stored in the current block.")
         return False
     return True
  
   def proof_of_work(self,block, difficulty=2):
     proof = block.generate_hash()
     while proof[:difficulty] != '0'*difficulty:
       block.nonce += 1
       proof = block.generate_hash()
     block.nonce = 0
     return proof

#Adding Blocks to the Chain Securely

 from block import Block

 class Blockchain:
   def __init__(self):
     self.chain = []
     self.unconfirmed_transactions = []
     self.genesis_block()

   def genesis_block(self):
     transactions = []
     genesis_block = Block(transactions, "0")
     genesis_block.generate_hash()
     self.chain.append(genesis_block)

   def add_block(self, transactions):
     previous_hash = (self.chain[len(self.chain)-1]).hash
     new_block = Block(transactions, previous_hash)
     new_block.generate_hash()
     proof = self.proof_of_work(new_block)
     self.chain.append(new_block)
     return proof, new_block

   def print_blocks(self):
     for i in range(len(self.chain)):
       current_block = self.chain[i]
       print("Block {} {}".format(i, current_block))
       current_block.print_contents()

   def validate_chain(self):
     for i in range(1, len(self.chain)):
       current = self.chain[i]
       previous = self.chain[i-1]
       if(current.hash != current.generate_hash()):
         print("The current hash of the block does not equal the generated hash of the block.")
         return False
       if(current.previous_hash != previous.generate_hash()):
         print("The previous block's hash does not equal the previous hash value stored in the current block.")
         return False
      return True
  
   def proof_of_work(self, block, difficulty=2):
     proof = block.generate_hash()
     while proof[:difficulty] != '0'*difficulty:
       block.nonce += 1                          #incrementa 1
       proof = block.generate_hash()
     block.nonce = 0
     return proof

#Final Blockchain

 from blockchain import Blockchain

 block_one_transactions = {"sender":"André", "receiver": "Pedro", "amount":"50"}
 block_two_transactions = {"sender": "Bernardo", "receiver":"Vasco", "amount":"25"}
 block_three_transactions = {"sender":"Carlos", "receiver":"Tiago", "amount":"35"}
 fake_transactions = {"sender": "José Socrates", "receiver":"Povo PT, Estado PT", "amount":"25"}

 local_blockchain = Blockchain()
 local_blockchain.print_blocks()

 local_blockchain.add_block(block_one_transactions)
 local_blockchain.add_block(block_two_transactions)
 local_blockchain.add_block(block_three_transactions)
 local_blockchain.print_blocks()
 local_blockchain.chain[2].transactions = fake_transactions
 local_blockchain.validate_chain()
      